// directives
dir_address_size      = { ".address_size" }
dir_explicitcluster   = { ".explicitcluster" }
dir_maxnreg           = { ".maxnreg" }
dir_section           = { ".section" }
dir_alias             = { ".alias" }
dir_extern            = { ".extern" }
dir_maxntid           = { ".maxntid" }
dir_shared            = { ".shared" }
dir_align             = { ".align" }
dir_file              = { ".file" }
dir_minnctapersm      = { ".minnctapersm" }
dir_sreg              = { ".sreg" }
dir_branchtargets     = { ".branchtargets" }
dir_func              = { ".func" }
dir_noreturn          = { ".noreturn" }
dir_target            = { ".target" }
dir_callprototype     = { ".callprototype" }
dir_global            = { ".global" }
dir_param             = { ".param" }
dir_tex_dir           = { ".tex" }
dir_calltargets       = { ".calltargets" }
dir_loc               = { ".loc" }
dir_pragma            = { ".pragma" }
dir_version           = { ".version" }
dir_common            = { ".common" }
dir_local             = { ".local" }
dir_reg               = { ".reg" }
dir_visible           = { ".visible" }
dir_const             = { ".const" }
dir_maxclusterrank    = { ".maxclusterrank" }
dir_reqnctapercluster = { ".reqnctapercluster" }
dir_weak              = { ".weak" }
dir_entry             = { ".entry" }
dir_maxnctapersm      = { ".maxnctapersm" }
dir_reqntid           = { ".reqntid" }

dir_kw     = { dir_address_size | dir_explicitcluster | dir_maxnreg | dir_section | dir_alias | dir_extern | dir_maxntid | dir_shared | dir_align | dir_file | dir_minnctapersm | dir_sreg | dir_branchtargets | dir_func | dir_noreturn | dir_target | dir_callprototype | dir_global | dir_param | dir_tex_dir | dir_calltargets | dir_loc | dir_pragma | dir_version | dir_common | dir_local | dir_reg | dir_visible | dir_const | dir_maxclusterrank | dir_reqnctapercluster | dir_weak | dir_entry | dir_maxnctapersm | dir_reqntid }
statespace = { dir_global | dir_param | dir_local | dir_shared | dir_const | dir_reg }

// instructions
ins_abs            = { "abs" }
ins_discard        = { "discard" }
ins_min            = { "min" }
ins_shf            = { "shf" }
ins_vadd           = { "vadd" }
ins_activemask     = { "activemask" }
ins_div            = { "div" }
ins_mma            = { "mma" }
ins_shfl           = { "shfl" }
ins_vadd2          = { "vadd2" }
ins_add            = { "add" }
ins_dp2a           = { "dp2a" }
ins_mov            = { "mov" }
ins_shl            = { "shl" }
ins_vadd4          = { "vadd4" }
ins_addc           = { "addc" }
ins_dp4a           = { "dp4a" }
ins_movmatrix      = { "movmatrix" }
ins_shr            = { "shr" }
ins_vavrg2         = { "vavrg2" }
ins_alloca         = { "alloca" }
ins_elect          = { "elect" }
ins_mul            = { "mul" }
ins_sin            = { "sin" }
ins_vavrg4         = { "vavrg4" }
ins_and            = { "and" }
ins_ex2            = { "ex2" }
ins_mul24          = { "mul24" }
ins_slct           = { "slct" }
ins_vmad           = { "vmad" }
ins_applypriority  = { "applypriority" }
ins_exit           = { "exit" }
ins_multimem       = { "multimem" }
ins_sqrt           = { "sqrt" }
ins_vmax           = { "vmax" }
ins_atom           = { "atom" }
ins_fence          = { "fence" }
ins_nanosleep      = { "nanosleep" }
ins_st             = { "st" }
ins_vmax2          = { "vmax2" }
ins_bar            = { "bar" }
ins_fma            = { "fma" }
ins_neg            = { "neg" }
ins_stackrestore   = { "stackrestore" }
ins_vmax4          = { "vmax4" }
ins_barrier        = { "barrier" }
ins_fns            = { "fns" }
ins_not            = { "not" }
ins_stacksave      = { "stacksave" }
ins_vmin           = { "vmin" }
ins_bfe            = { "bfe" }
ins_getctarank     = { "getctarank" }
ins_or             = { "or" }
ins_stmatrix       = { "stmatrix" }
ins_vmin2          = { "vmin2" }
ins_bfi            = { "bfi" }
ins_griddepcontrol = { "griddepcontrol" }
ins_pmevent        = { "pmevent" }
ins_sub            = { "sub" }
ins_vmin4          = { "vmin4" }
ins_bfind          = { "bfind" }
ins_isspacep       = { "isspacep" }
ins_popc           = { "popc" }
ins_subc           = { "subc" }
ins_vote           = { "vote" }
ins_bmsk           = { "bmsk" }
ins_istypep        = { "istypep" }
ins_prefetch       = { "prefetch" }
ins_suld           = { "suld" }
ins_vset           = { "vset" }
ins_bra            = { "bra" }
ins_ld             = { "ld" }
ins_prefetchu      = { "prefetchu" }
ins_suq            = { "suq" }
ins_vset2          = { "vset2" }
ins_brev           = { "brev" }
ins_ldmatrix       = { "ldmatrix" }
ins_prmt           = { "prmt" }
ins_sured          = { "sured" }
ins_vset4          = { "vset4" }
ins_brkpt          = { "brkpt" }
ins_ldu            = { "ldu" }
ins_rcp            = { "rcp" }
ins_sust           = { "sust" }
ins_vshl           = { "vshl" }
ins_brx            = { "brx" }
ins_lg2            = { "lg2" }
ins_red            = { "red" }
ins_szext          = { "szext" }
ins_vshr           = { "vshr" }
ins_call           = { "call" }
ins_lop3           = { "lop3" }
ins_redux          = { "redux" }
ins_tanh           = { "tanh" }
ins_vsub           = { "vsub" }
ins_clz            = { "clz" }
ins_mad            = { "mad" }
ins_rem            = { "rem" }
ins_testp          = { "testp" }
ins_vsub2          = { "vsub2" }
ins_cnot           = { "cnot" }
ins_mad24          = { "mad24" }
ins_ret            = { "ret" }
ins_tex            = { "tex" }
ins_vsub4          = { "vsub4" }
ins_copysign       = { "copysign" }
ins_madc           = { "madc" }
ins_rsqrt          = { "rsqrt" }
ins_tld4           = { "tld4" }
ins_wgmma          = { "wgmma" }
ins_cos            = { "cos" }
ins_mapa           = { "mapa" }
ins_sad            = { "sad" }
ins_trap           = { "trap" }
ins_wmma           = { "wmma" }
ins_cp             = { "cp" }
ins_match          = { "match" }
ins_selp           = { "selp" }
ins_txq            = { "txq" }
ins_xor            = { "xor" }
ins_createpolicy   = { "createpolicy" }
ins_max            = { "max" }
ins_set            = { "set" }
ins_vabsdiff       = { "vabsdiff" }
ins_cvt            = { "cvt" }
ins_mbarrier       = { "mbarrier" }
ins_setmaxnreg     = { "setmaxnreg" }
ins_vabsdiff2      = { "vabsdiff2" }
ins_cvta           = { "cvta" }
ins_membar         = { "membar" }
ins_setp           = { "setp" }
ins_vabsdiff4      = { "vabsdiff4" }

ins_kw = {
    ins_abs
  | ins_discard
  | ins_min
  | ins_shf
  | ins_vadd
  | ins_activemask
  | ins_div
  | ins_mma
  | ins_shfl
  | ins_vadd2
  | ins_add
  | ins_dp2a
  | ins_mov
  | ins_shl
  | ins_vadd4
  | ins_addc
  | ins_dp4a
  | ins_movmatrix
  | ins_shr
  | ins_vavrg2
  | ins_alloca
  | ins_elect
  | ins_mul
  | ins_sin
  | ins_vavrg4
  | ins_and
  | ins_ex2
  | ins_mul24
  | ins_slct
  | ins_vmad
  | ins_applypriority
  | ins_exit
  | ins_multimem
  | ins_sqrt
  | ins_vmax
  | ins_atom
  | ins_fence
  | ins_nanosleep
  | ins_st
  | ins_vmax2
  | ins_bar
  | ins_fma
  | ins_neg
  | ins_stackrestore
  | ins_vmax4
  | ins_barrier
  | ins_fns
  | ins_not
  | ins_stacksave
  | ins_vmin
  | ins_bfe
  | ins_getctarank
  | ins_or
  | ins_stmatrix
  | ins_vmin2
  | ins_bfi
  | ins_griddepcontrol
  | ins_pmevent
  | ins_sub
  | ins_vmin4
  | ins_bfind
  | ins_isspacep
  | ins_popc
  | ins_subc
  | ins_vote
  | ins_bmsk
  | ins_istypep
  | ins_prefetch
  | ins_suld
  | ins_vset
  | ins_bra
  | ins_ld
  | ins_prefetchu
  | ins_suq
  | ins_vset2
  | ins_brev
  | ins_ldmatrix
  | ins_prmt
  | ins_sured
  | ins_vset4
  | ins_brkpt
  | ins_ldu
  | ins_rcp
  | ins_sust
  | ins_vshl
  | ins_brx
  | ins_lg2
  | ins_red
  | ins_szext
  | ins_vshr
  | ins_call
  | ins_lop3
  | ins_redux
  | ins_tanh
  | ins_vsub
  | ins_clz
  | ins_mad
  | ins_rem
  | ins_testp
  | ins_vsub2
  | ins_cnot
  | ins_mad24
  | ins_ret
  | ins_tex
  | ins_vsub4
  | ins_copysign
  | ins_madc
  | ins_rsqrt
  | ins_tld4
  | ins_wgmma
  | ins_cos
  | ins_mapa
  | ins_sad
  | ins_trap
  | ins_wmma
  | ins_cp
  | ins_match
  | ins_selp
  | ins_txq
  | ins_xor
  | ins_createpolicy
  | ins_max
  | ins_setp
  | ins_set
  | ins_vabsdiff
  | ins_cvt
  | ins_mbarrier
  | ins_setmaxnreg
  | ins_vabsdiff2
  | ins_cvta
  | ins_membar
  | ins_vabsdiff4
}

// types
type_s8    = { ".s8" }
type_s16   = { ".s16" }
type_s32   = { ".s32" }
type_s64   = { ".s64" }
type_u8    = { ".u8" }
type_u16   = { ".u16" }
type_u32   = { ".u32" }
type_u64   = { ".u64" }
type_b8    = { ".b8" }
type_b16   = { ".b16" }
type_b32   = { ".b32" }
type_b64   = { ".b64" }
type_b128  = { ".b128" }
type_f16   = { ".f16" }
type_f16x2 = { ".s16x2" }
type_f32   = { ".f32" }
type_f64   = { ".f64" }
type_pred  = { ".pred" }

type = { type_s8 | type_s16 | type_s32 | type_s64 | type_u8 | type_u16 | type_u32 | type_u64 | type_b8 | type_b16 | type_b32 | type_b64 | type_b128 | type_f16 | type_f16x2 | type_f32 | type_f64 | type_pred }

mod_cta  = { ".cta" }
mod_sync = { ".sync" }
mod_to   = { ".to" }
mod_rn   = { ".rn" }
mod_rz   = { ".rz" }
mod_rm   = { ".rm" }
mod_rp   = { ".rp" }
mod_lo   = { ".lo" }
mod_hi   = { ".hi" }
mod_wide = { ".wide" }
mod_eq   = { ".eq" }
mod_ne   = { ".ne" }
mod_lt   = { ".lt" }
mod_le   = { ".le" }
mod_gt   = { ".gt" }
mod_ge   = { ".ge" }
mod_uni  = { ".uni" }

modifier = { mod_cta | mod_sync | mod_to | mod_rn | mod_rz | mod_rm | mod_rp | mod_lo | mod_hi | mod_wide | mod_eq | mod_ne | mod_lt | mod_le | mod_gt | mod_ge | mod_uni }

special_reg = { "%tid.x" | "%ntid.x" | "%ctaid.x" }

attribute = _{ modifier | statespace }

integer       = { ("+" | "-")? ~ ASCII_DIGIT+ }
float         = { ("+" | "-")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
float32_exact = { "0" ~ ("d" | "D") ~ ASCII_HEX_DIGIT{8} }
float64_exact = { "0" ~ ("d" | "D") ~ ASCII_HEX_DIGIT{16} }

ident = _{ (ASCII_ALPHA | "_" | "%" | "$") ~ (ASCII_ALPHANUMERIC | "_" | "$")+ }

version_nr = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
version    =  { dir_version ~ version_nr }
target     =  { dir_target ~ ident }
addrsize   =  { dir_address_size ~ ASCII_DIGIT+ }

reg_repeat   = { "<" ~ ASCII_DIGIT+ ~ ">" }
array_bounds = { ("[" ~ ASCII_DIGIT+ ~ "]")+ }
// var_decl = { statespace ~ attribute* ~ type ~ ident ~ (reg_repeat | array_bounds)?}
var_decl   = { statespace ~ type ~ ident ~ reg_repeat? ~ ";" }
param_decl = { dir_param ~ type ~ ident }

ret_param  = _{ "(" ~ param_decl ~ ")" }
param_list = _{ "(" ~ (param_decl ~ ",")* ~ param_decl ~ ")" }
func_decl  =  { dir_visible? ~ (dir_entry | dir_func) ~ ret_param? ~ ident ~ param_list? ~ grouping }

directive = { version | target | addrsize | var_decl | func_decl }

addr_operand  =  { "[" ~ ident ~ "]" }
named_operand =  { ident }
immediate     =  { integer | float | float32_exact | float64_exact }
operand       = _{ special_reg | addr_operand | named_operand | immediate }
operand_list  = _{ (operand ~ ",")* ~ operand }
guard         =  { "@" ~ ("!")? ~ ident }
instruction   =  { guard? ~ ins_kw ~ (attribute | type)* ~ operand_list? ~ ";" }

label = { ident ~ ":" }

statement = { var_decl | grouping | instruction | label }
grouping  = { "{" ~ (statement)* ~ "}" }

program = _{ SOI ~ (directive)* ~ EOI }
// program = { var_decl }

// todo
WHITESPACE = _{ " " | NEWLINE | "\t" }
COMMENT    = _{ "//" }
