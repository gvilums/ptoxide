   Compiling ptoxide v0.1.0 (/home/gvilums/projects/ptoxide)
warning: unused variable: `addr`
  --> src/compiler.rs:56:35
   |
56 |             Some(Variable::Memory(addr)) => Err(CompilationError::InvalidStateSpace),
   |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_addr`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `addr`
  --> src/compiler.rs:64:35
   |
64 |             Some(Variable::Memory(addr)) => Err(CompilationError::InvalidStateSpace),
   |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_addr`

warning: unused variable: `reg`
  --> src/compiler.rs:71:37
   |
71 |             Some(Variable::Register(reg)) => Err(CompilationError::InvalidStateSpace),
   |                                     ^^^ help: if this is intentional, prefix it with an underscore: `_reg`

warning: unused variable: `ty`
   --> src/compiler.rs:292:9
    |
292 |         ty: ast::Type,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ty`

warning: unused variable: `ty`
   --> src/compiler.rs:373:22
    |
373 |             Load(st, ty) => {
    |                      ^^ help: if this is intentional, prefix it with an underscore: `_ty`

warning: unused variable: `offset`
   --> src/compiler.rs:384:62
    |
384 | ...                   AddressOperand::AddressOffset(_, offset) => todo!(),
    |                                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `ident`
   --> src/compiler.rs:385:65
    |
385 | ...                   AddressOperand::AddressOffsetVar(_, ident) => todo!(),
    |                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_ident`

warning: unused variable: `idx`
   --> src/compiler.rs:386:59
    |
386 | ...                   AddressOperand::ArrayIndex(_, idx) => todo!(),
    |                                                     ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `offset`
   --> src/compiler.rs:393:62
    |
393 | ...                   AddressOperand::AddressOffset(_, offset) => todo!(),
    |                                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `ident`
   --> src/compiler.rs:394:65
    |
394 | ...                   AddressOperand::AddressOffsetVar(_, ident) => todo!(),
    |                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_ident`

warning: unused variable: `idx`
   --> src/compiler.rs:395:59
    |
395 | ...                   AddressOperand::ArrayIndex(_, idx) => todo!(),
    |                                                     ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `ty`
   --> src/compiler.rs:414:23
    |
414 |             Store(st, ty) => {
    |                       ^^ help: if this is intentional, prefix it with an underscore: `_ty`

warning: unused variable: `offset`
   --> src/compiler.rs:425:62
    |
425 | ...                   AddressOperand::AddressOffset(_, offset) => todo!(),
    |                                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `ident`
   --> src/compiler.rs:426:65
    |
426 | ...                   AddressOperand::AddressOffsetVar(_, ident) => todo!(),
    |                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_ident`

warning: unused variable: `idx`
   --> src/compiler.rs:427:59
    |
427 | ...                   AddressOperand::ArrayIndex(_, idx) => todo!(),
    |                                                     ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `offset`
   --> src/compiler.rs:434:62
    |
434 | ...                   AddressOperand::AddressOffset(_, offset) => todo!(),
    |                                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `ident`
   --> src/compiler.rs:435:65
    |
435 | ...                   AddressOperand::AddressOffsetVar(_, ident) => todo!(),
    |                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_ident`

warning: unused variable: `idx`
   --> src/compiler.rs:436:59
    |
436 | ...                   AddressOperand::ArrayIndex(_, idx) => todo!(),
    |                                                     ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `ty`
   --> src/compiler.rs:510:28
    |
510 |             ConvertAddress(ty, st) => todo!(),
    |                            ^^ help: if this is intentional, prefix it with an underscore: `_ty`

warning: unused variable: `st`
   --> src/compiler.rs:510:32
    |
510 |             ConvertAddress(ty, st) => todo!(),
    |                                ^^ help: if this is intentional, prefix it with an underscore: `_st`

warning: unused variable: `st`
   --> src/compiler.rs:511:34
    |
511 |             ConvertAddressTo(ty, st) => {
    |                                  ^^ help: if this is intentional, prefix it with an underscore: `_st`

warning: unused variable: `uniform`
   --> src/compiler.rs:533:17
    |
533 |                 uniform,
    |                 ^^^^^^^ help: try ignoring the field: `uniform: _`

warning: unused variable: `ident`
   --> src/compiler.rs:534:17
    |
534 |                 ident,
    |                 ^^^^^ help: try ignoring the field: `ident: _`

warning: unused variable: `ret_param`
   --> src/compiler.rs:535:17
    |
535 |                 ret_param,
    |                 ^^^^^^^^^ help: try ignoring the field: `ret_param: _`

warning: unused variable: `params`
   --> src/compiler.rs:536:17
    |
536 |                 params,
    |                 ^^^^^^ help: try ignoring the field: `params: _`

warning: unused variable: `idx`
   --> src/compiler.rs:547:22
    |
547 |                     [idx, cnt] => {
    |                      ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `cnt`
   --> src/compiler.rs:547:27
    |
547 |                     [idx, cnt] => {
    |                           ^^^ help: if this is intentional, prefix it with an underscore: `_cnt`

warning: unused variable: `idx`
   --> src/vm.rs:473:30
    |
473 |     pub fn arrive(&mut self, idx: usize, target: usize) -> VmResult<Vec<ThreadState>> {
    |                              ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `target`
   --> src/vm.rs:473:42
    |
473 |     pub fn arrive(&mut self, idx: usize, target: usize) -> VmResult<Vec<ThreadState>> {
    |                                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_target`

warning: unused variable: `lex`
  --> src/ast.rs:38:25
   |
38 | fn lex_float64_constant(lex: &mut Lexer<Token>) -> Option<f64> {
   |                         ^^^ help: if this is intentional, prefix it with an underscore: `_lex`

warning: method `get_memory` is never used
  --> src/compiler.rs:69:12
   |
37 | impl VariableMap {
   | ---------------- method in this implementation
...
69 |     pub fn get_memory(&self, ident: &str) -> Result<vm::AddrOperand, CompilationError> {
   |            ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `parent` is never read
   --> src/compiler.rs:112:5
    |
111 | struct FuncCodegenState<'a> {
    |        ---------------- field in this struct
112 |     parent: &'a CompiledModule,
    |     ^^^^^^

warning: variant `Variable` is never constructed
 --> src/vm.rs:9:5
  |
7 | pub enum Symbol {
  |          ------ variant in this enum
8 |     Function(usize),
9 |     Variable(usize),
  |     ^^^^^^^^
  |
  = note: `Symbol` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `symbol_map` is never read
   --> src/vm.rs:209:5
    |
205 | pub struct Context {
    |            ------- field in this struct
...
209 |     symbol_map: HashMap<String, Symbol>,
    |     ^^^^^^^^^^
    |
    = note: `Context` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: multiple methods are never used
   --> src/vm.rs:299:15
    |
263 | impl ThreadState {
    | ---------------- methods in this implementation
...
299 |         Reg8, get_u8, set_u8, b8, u8;
    |               ^^^^^^  ^^^^^^
300 |         Reg16, get_u16, set_u16, b16, u16;
    |                ^^^^^^^  ^^^^^^^
...
303 |         Reg128, get_u128, set_u128, b128, u128;
    |                 ^^^^^^^^  ^^^^^^^^
304 |
305 |         Reg8, get_i8, set_i8, b8, i8;
    |                       ^^^^^^
306 |         Reg16, get_i16, set_i16, b16, i16;
    |                         ^^^^^^^
...
309 |         Reg128, get_i128, set_i128, b128, i128;
    |                           ^^^^^^^^
...
314 |         Reg64, get_f64, set_f64, b64, f64
    |                ^^^^^^^  ^^^^^^^
    |
    = note: this warning originates in the macro `generate_reg_functions2` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: field `value` is never read
   --> src/ast.rs:384:5
    |
383 | pub struct Pragma {
    |            ------ field in this struct
384 |     value: String,
    |     ^^^^^
    |
    = note: `Pragma` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis

warning: `ptoxide` (lib) generated 36 warnings (run `cargo fix --lib -p ptoxide` to apply 30 suggestions)
warning: `ptoxide` (lib test) generated 36 warnings (36 duplicates)
    Finished test [unoptimized + debuginfo] target(s) in 1.01s
     Running unittests src/lib.rs (target/debug/deps/ptoxide-df33cb07d60eadfb)

running 10 tests
test ast::test::test_parse_add ... ok
test ast::test::test_parse_add_simple ... ok
test vm::test::simple ... ok
test vm::test::multiple_threads ... ok
test ast::test::test_parse_test ... ok
test compiler::test::compile_add ... ok
test compiler::test::compile_add_simple ... ok
test compiler::test::compile_transpose ... ok
test ast::test::test_parse_transpose ... ok
test ast::test::test_parse_gemm ... FAILED

failures:

---- ast::test::test_parse_gemm stdout ----
[src/ast.rs:637] res = [
    Ok(
        Version,
    ),
    Ok(
        VersionNumber(
            Version {
                major: 8,
                minor: 3,
            },
        ),
    ),
    Ok(
        Target,
    ),
    Ok(
        Identifier(
            "sm_89",
        ),
    ),
    Ok(
        AddressSize,
    ),
    Ok(
        IntegerConst(
            64,
        ),
    ),
    Ok(
        Visible,
    ),
    Ok(
        Entry,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm",
        ),
    ),
    Ok(
        LeftParen,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_0",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_2",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_3",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_4",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_5",
        ),
    ),
    Ok(
        RightParen,
    ),
    Ok(
        LeftBrace,
    ),
    Ok(
        Reg,
    ),
    Ok(
        Predicate,
    ),
    Ok(
        Identifier(
            "%p",
        ),
    ),
    Ok(
        RegMultiplicity(
            9,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Reg,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f",
        ),
    ),
    Ok(
        RegMultiplicity(
            30,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Reg,
    ),
    Ok(
        Bit32,
    ),
    Ok(
        Identifier(
            "%r",
        ),
    ),
    Ok(
        RegMultiplicity(
            9,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Reg,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd",
        ),
    ),
    Ok(
        RegMultiplicity(
            61,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd31",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_0",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd32",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_1",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd28",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_2",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd33",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_3",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_4",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Param,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd30",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "_Z4gemmPfS_S_mmm_param_5",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ConvertAddress,
    ),
    Ok(
        To,
    ),
    Ok(
        Global,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd32",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ConvertAddress,
    ),
    Ok(
        To,
    ),
    Ok(
        Global,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd2",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd31",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%r1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        NumThreadsX,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%r2",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        CtaIdX,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%r3",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        ThreadIdX,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        MultiplyAdd,
    ),
    Ok(
        Low,
    ),
    Ok(
        Signed32,
    ),
    Ok(
        Identifier(
            "%r4",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r2",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r3",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Convert,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%rd3",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r4",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%r5",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        NumThreadsY,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%r6",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        CtaIdY,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%r7",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        ThreadIdY,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        MultiplyAdd,
    ),
    Ok(
        Low,
    ),
    Ok(
        Signed32,
    ),
    Ok(
        Identifier(
            "%r8",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r6",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r5",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r7",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Convert,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Unsigned32,
    ),
    Ok(
        Identifier(
            "%rd4",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%r8",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        SetPredicate,
    ),
    Ok(
        Ge,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%p1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd3",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd33",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        SetPredicate,
    ),
    Ok(
        Ge,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%p2",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd4",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd30",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Or,
    ),
    Ok(
        Predicate,
    ),
    Ok(
        Identifier(
            "%p3",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%p1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%p2",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        At,
    ),
    Ok(
        Identifier(
            "%p3",
        ),
    ),
    Ok(
        Branch,
    ),
    Ok(
        Identifier(
            "$L__BB0_9",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        SetPredicate,
    ),
    Ok(
        Eq,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%p4",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Float32Const(
            0.0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        At,
    ),
    Ok(
        Identifier(
            "%p4",
        ),
    ),
    Ok(
        Branch,
    ),
    Ok(
        Identifier(
            "$L__BB0_8",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Mul,
    ),
    Ok(
        Low,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd5",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd3",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd29",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        And,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd6",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            3,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd35",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            -1,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        SetPredicate,
    ),
    Ok(
        Lt,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%p5",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd35",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            3,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Float32Const(
            0.0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd57",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        At,
    ),
    Ok(
        Identifier(
            "%p5",
        ),
    ),
    Ok(
        Branch,
    ),
    Ok(
        Identifier(
            "$L__BB0_5",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Identifier(
            "sub",
        ),
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd7",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd6",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd29",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ShiftLeft,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd37",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd4",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            2,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd55",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd37",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ShiftLeft,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd38",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd5",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            2,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd39",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd2",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd38",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd54",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd39",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            8,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ShiftLeft,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd10",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd30",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            2,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Float32Const(
            0.0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Move,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd57",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Identifier(
            "$L__BB0_4",
        ),
    ),
    Ok(
        Colon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f12",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd55",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f13",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd54",
        ),
    ),
    Ok(
        Plus,
    ),
    Ok(
        IntegerConst(
            -8,
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        FusedMulAdd,
    ),
    Ok(
        Rn,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f14",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f13",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f12",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd40",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd55",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd10",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f15",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd40",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f16",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd54",
        ),
    ),
    Ok(
        Plus,
    ),
    Ok(
        IntegerConst(
            -4,
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        FusedMulAdd,
    ),
    Ok(
        Rn,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f17",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f16",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f15",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f14",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd41",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd40",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd10",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f18",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd41",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f19",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd54",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        FusedMulAdd,
    ),
    Ok(
        Rn,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f20",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f19",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f18",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f17",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd42",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd41",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd10",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd55",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd42",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd10",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f21",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd42",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f22",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd54",
        ),
    ),
    Ok(
        Plus,
    ),
    Ok(
        IntegerConst(
            4,
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        FusedMulAdd,
    ),
    Ok(
        Rn,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f22",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f21",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f20",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd57",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd57",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            4,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd43",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd7",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd57",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd54",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd54",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            16,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        SetPredicate,
    ),
    Ok(
        Ne,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%p6",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd43",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        At,
    ),
    Ok(
        Identifier(
            "%p6",
        ),
    ),
    Ok(
        Branch,
    ),
    Ok(
        Identifier(
            "$L__BB0_4",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Identifier(
            "$L__BB0_5",
        ),
    ),
    Ok(
        Colon,
    ),
    Ok(
        SetPredicate,
    ),
    Ok(
        Eq,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%p7",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd6",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        At,
    ),
    Ok(
        Identifier(
            "%p7",
        ),
    ),
    Ok(
        Branch,
    ),
    Ok(
        Identifier(
            "$L__BB0_8",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Mul,
    ),
    Ok(
        Low,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd44",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd57",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd30",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd45",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd44",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd4",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ShiftLeft,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd46",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd45",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            2,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd60",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd1",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd46",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ShiftLeft,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd19",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd30",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            2,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd47",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd57",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd5",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ShiftLeft,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd48",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd47",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            2,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd59",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd2",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd48",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Identifier(
            "neg",
        ),
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd58",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd6",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Identifier(
            "$L__BB0_7",
        ),
    ),
    Ok(
        Colon,
    ),
    Ok(
        Pragma,
    ),
    Ok(
        StringLiteral(
            "\"nounroll\"",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f23",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd60",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Load,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f24",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd59",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        FusedMulAdd,
    ),
    Ok(
        Rn,
    ),
    Ok(
        Float32,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f24",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f23",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd60",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd60",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd19",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd59",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd59",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            4,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd58",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd58",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            1,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        SetPredicate,
    ),
    Ok(
        Ne,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%p8",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd58",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            0,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        At,
    ),
    Ok(
        Identifier(
            "%p8",
        ),
    ),
    Ok(
        Branch,
    ),
    Ok(
        Identifier(
            "$L__BB0_7",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Identifier(
            "$L__BB0_8",
        ),
    ),
    Ok(
        Colon,
    ),
    Ok(
        Mul,
    ),
    Ok(
        Low,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd49",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd3",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd30",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd50",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd49",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd4",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ConvertAddress,
    ),
    Ok(
        To,
    ),
    Ok(
        Global,
    ),
    Ok(
        Unsigned64,
    ),
    Ok(
        Identifier(
            "%rd51",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd28",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        ShiftLeft,
    ),
    Ok(
        Bit64,
    ),
    Ok(
        Identifier(
            "%rd52",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd50",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        IntegerConst(
            2,
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Add,
    ),
    Ok(
        Signed64,
    ),
    Ok(
        Identifier(
            "%rd53",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd51",
        ),
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%rd52",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Store,
    ),
    Ok(
        Global,
    ),
    Ok(
        Float32,
    ),
    Ok(
        LeftBracket,
    ),
    Ok(
        Identifier(
            "%rd53",
        ),
    ),
    Ok(
        RightBracket,
    ),
    Ok(
        Comma,
    ),
    Ok(
        Identifier(
            "%f29",
        ),
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        Identifier(
            "$L__BB0_9",
        ),
    ),
    Ok(
        Colon,
    ),
    Ok(
        Return,
    ),
    Ok(
        Semicolon,
    ),
    Ok(
        RightBrace,
    ),
]
thread 'ast::test::test_parse_gemm' panicked at src/ast.rs:1312:42:
called `Result::unwrap()` on an `Err` value: UnexpectedToken(Or)
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    ast::test::test_parse_gemm

test result: FAILED. 9 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

error: test failed, to rerun pass `--lib`
